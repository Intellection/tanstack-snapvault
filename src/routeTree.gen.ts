/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutRegisterRouteImport } from './routes/_layout/register'
import { Route as LayoutProfileRouteImport } from './routes/_layout/profile'
import { Route as LayoutLoginRouteImport } from './routes/_layout/login'
import { Route as LayoutDashboardRouteImport } from './routes/_layout/dashboard'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutRegisterRoute = LayoutRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutProfileRoute = LayoutProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutLoginRoute = LayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutDashboardRoute = LayoutDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof LayoutDashboardRoute
  '/login': typeof LayoutLoginRoute
  '/profile': typeof LayoutProfileRoute
  '/register': typeof LayoutRegisterRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesByTo {
  '/dashboard': typeof LayoutDashboardRoute
  '/login': typeof LayoutLoginRoute
  '/profile': typeof LayoutProfileRoute
  '/register': typeof LayoutRegisterRoute
  '/': typeof LayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/login': typeof LayoutLoginRoute
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/register': typeof LayoutRegisterRoute
  '/_layout/': typeof LayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/login' | '/profile' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard' | '/login' | '/profile' | '/register' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/dashboard'
    | '/_layout/login'
    | '/_layout/profile'
    | '/_layout/register'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/register': {
      id: '/_layout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof LayoutRegisterRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LayoutLoginRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutLoginRoute: typeof LayoutLoginRoute
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutRegisterRoute: typeof LayoutRegisterRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutLoginRoute: LayoutLoginRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutRegisterRoute: LayoutRegisterRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
